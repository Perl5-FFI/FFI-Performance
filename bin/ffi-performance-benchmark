#!/usr/bin/perl

use strict;
use warnings;
use v5.10;
use FFI::Performance;
use Benchmark qw( timethese cmpthese );

my %tests;

foreach my $type (sort qw( Inline Platypus PlatypusSl Raw Sweet SweetLite SweetLite2 XS OO ))
{
  next if $type eq 'Sweet';
  my(@impl_tests) = eval '# line '. __LINE__ . ' "' . __FILE__ . "\n" . qq{
    package
      test::$type;
    
    use FFI::Performance::$type;
    
    (
      sub {
        my \$result = test1(22);
      },
      __PACKAGE__->can('test2') ? sub { my \$result = test2("hello there" x 512) } : undef,
      sub {
        my \$result = test3(1,2,3,4,5,6,7,8,9,10);
      },
      __PACKAGE__->can('test4') ? sub { my \$result = test4(\\1,\\2) } : undef,
      __PACKAGE__->can('test5') ? sub { my \$result = test5(2, [1,2]) } : undef,
    ),
  };
  if(my $error = $@)
  {
    warn $error;
    warn "no $type";
    next;
  }
  
  $tests{'01 single integer argument and return'}->{$type} = $impl_tests[0];
  $tests{'02 single string argument and return '}->{$type} = $impl_tests[1] if defined $impl_tests[1];
  $tests{'03 many integer arguments            '}->{$type} = $impl_tests[2];
  $tests{'04 pointer to integer test           '}->{$type} = $impl_tests[3] if defined $impl_tests[3];
  $tests{'05 array of integer test             '}->{$type} = $impl_tests[4] if defined $impl_tests[4];
}

# avoid warning.  ignore fatal
eval q{ Inline->init };

foreach my $test (sort keys %tests)
{
  say '';
  say "## $test ##";
  say '';
  my $results = timethese(1024*1024*10, $tests{$test});
  
  say '';
  cmpthese($results);
}

